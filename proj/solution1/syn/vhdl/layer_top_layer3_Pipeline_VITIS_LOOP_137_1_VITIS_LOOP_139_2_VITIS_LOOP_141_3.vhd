-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layer_top_layer3_Pipeline_VITIS_LOOP_137_1_VITIS_LOOP_139_2_VITIS_LOOP_141_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_feature_map : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln137 : IN STD_LOGIC_VECTOR (62 downto 0) );
end;


architecture behav of layer_top_layer3_Pipeline_VITIS_LOOP_137_1_VITIS_LOOP_139_2_VITIS_LOOP_141_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_730000 : STD_LOGIC_VECTOR (22 downto 0) := "11100110000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_3980 : STD_LOGIC_VECTOR (14 downto 0) := "011100110000000";
    constant ap_const_lv25_7300 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000111001100000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv23_3980 : STD_LOGIC_VECTOR (22 downto 0) := "00000000011100110000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal icmp_ln144_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_1143_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_2_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op192_writereq_state18 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal icmp_ln144_reg_1143_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_2_reg_1197_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op209_writeresp_state24 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln137_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln137_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal fm_blk_n_R : STD_LOGIC;
    signal fm_blk_n_AW : STD_LOGIC;
    signal fm_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal fm_blk_n_B : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_predicate_op194_write_state19 : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln137_cast_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln137_cast_reg_1042 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_1047 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i_1_reg_1047_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten338_load_reg_1053 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten371_load_reg_1058 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln137_reg_1063_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_1067_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_fu_330_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln137_reg_1074 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln137_1_fu_338_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln137_1_reg_1079 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln137_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_reg_1089_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln139_fu_398_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln139_reg_1096 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln139_reg_1096_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln139_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln139_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln139_reg_1103_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fm_addr_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_reg_1109_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_1_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_read_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_addr_read_reg_1128_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_addr_1_read_reg_1133 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln143_5_fu_657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln143_5_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln143_5_reg_1138_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln144_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_1143_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_1143_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_829_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_1152 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln144_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_reg_1157 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln144_3_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_3_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln144_fu_857_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln144_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln144_2_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln144_2_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_2_fu_869_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln144_2_reg_1177 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln144_4_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_4_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_5_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_5_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_2_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_2_reg_1197_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_2_reg_1197_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal sext_ln143_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_4_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln141_fu_523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln139_5_fu_518_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten338_fu_180 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln139_6_fu_533_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_fu_184 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten371_fu_188 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln137_1_fu_513_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_fu_318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln137_1_fu_354_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln137_1_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln137_1_fu_354_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1_fu_290_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln143_1_fu_298_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln141_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln139_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln143_mid1_fu_418_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln137_4_fu_364_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln143_1_mid1_fu_434_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln137_5_fu_372_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln139_4_fu_442_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln143_2_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln137_2_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln139_3_fu_426_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln143_1_fu_462_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln143_1_fu_471_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln139_4_cast_fu_450_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln143_3_fu_477_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln143_2_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_2_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_493_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln139_1_fu_528_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln141_1_fu_564_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln141_1_mid1_fu_578_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln137_3_fu_571_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln139_2_fu_585_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_596_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln141_mid1_fu_610_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln137_2_fu_603_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln139_1_fu_617_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_993_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal j_cast11_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_7_fu_634_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_8_fu_639_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln144_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln144_fu_681_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_689_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_699_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln144_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln144_1_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln144_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_735_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln144_1_fu_751_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln144_4_fu_755_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln144_5_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln144_2_fu_765_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln144_3_fu_771_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln144_1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_2_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln144_fu_725_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln144_1_fu_803_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bit_select30_i_i_i_fu_809_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln144_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln144_2_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln144_1_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_2_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln144_fu_876_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln144_1_fu_881_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_3_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln144_3_fu_890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln144_1_fu_896_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_8_fu_910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln144_3_fu_926_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln144_2_fu_918_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln144_4_fu_931_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln144_4_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_937_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal LD_fu_944_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln144_3_fu_961_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln144_1_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_993_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_993_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_993_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_247_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_993_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to11 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_993_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_993_p20 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln137_1_fu_354_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component layer_top_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component layer_top_mul_10ns_16ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component layer_top_mac_muladd_10ns_14ns_12ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component layer_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dcmp_64ns_64ns_1_2_no_dsp_1_U2616 : component layer_top_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => ap_const_lv64_0,
        ce => grp_fu_247_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_247_p2);

    mul_10ns_16ns_25_1_1_U2617 : component layer_top_mul_10ns_16ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln137_1_fu_354_p0,
        din1 => mul_ln137_1_fu_354_p1,
        dout => mul_ln137_1_fu_354_p2);

    mac_muladd_10ns_14ns_12ns_23_4_1_U2618 : component layer_top_mac_muladd_10ns_14ns_12ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        din2_WIDTH => 12,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_993_p0,
        din1 => grp_fu_993_p1,
        din2 => grp_fu_993_p2,
        ce => grp_fu_993_ce,
        dout => grp_fu_993_p3);

    flow_control_loop_pipe_sequential_init_U : component layer_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_176 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_1063 = ap_const_lv1_0))) then 
                    i_fu_176 <= select_ln139_5_fu_518_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten338_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten338_fu_180 <= ap_const_lv15_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_1063 = ap_const_lv1_0))) then 
                    indvar_flatten338_fu_180 <= select_ln139_6_fu_533_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten371_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten371_fu_188 <= ap_const_lv23_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_1063 = ap_const_lv1_0))) then 
                    indvar_flatten371_fu_188 <= add_ln137_1_fu_513_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_172 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_1063 = ap_const_lv1_0))) then 
                    j_fu_172 <= add_ln141_fu_523_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_184 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_1063 = ap_const_lv1_0))) then 
                    k_fu_184 <= select_ln137_1_reg_1079;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln137_fu_306_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln139_reg_1096 <= add_ln139_fu_398_p2;
                and_ln137_reg_1089 <= and_ln137_fu_392_p2;
                fm_addr_reg_1109 <= sext_ln143_fu_503_p1;
                icmp_ln139_reg_1067 <= icmp_ln139_fu_324_p2;
                select_ln137_1_reg_1079 <= select_ln137_1_fu_338_p3;
                select_ln137_reg_1074 <= select_ln137_fu_330_p3;
                select_ln139_reg_1103 <= select_ln139_fu_410_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln139_reg_1096_pp0_iter1_reg <= add_ln139_reg_1096;
                and_ln137_reg_1089_pp0_iter1_reg <= and_ln137_reg_1089;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                fm_addr_1_read_reg_1133 <= m_axi_fm_RDATA;
                fm_addr_reg_1109_pp0_iter1_reg <= fm_addr_reg_1109;
                fm_addr_reg_1109_pp0_iter2_reg <= fm_addr_reg_1109_pp0_iter1_reg;
                fm_addr_reg_1109_pp0_iter3_reg <= fm_addr_reg_1109_pp0_iter2_reg;
                fm_addr_reg_1109_pp0_iter4_reg <= fm_addr_reg_1109_pp0_iter3_reg;
                fm_addr_reg_1109_pp0_iter5_reg <= fm_addr_reg_1109_pp0_iter4_reg;
                fm_addr_reg_1109_pp0_iter6_reg <= fm_addr_reg_1109_pp0_iter5_reg;
                fm_addr_reg_1109_pp0_iter7_reg <= fm_addr_reg_1109_pp0_iter6_reg;
                i_1_reg_1047 <= i_fu_176;
                i_1_reg_1047_pp0_iter1_reg <= i_1_reg_1047;
                icmp_ln137_reg_1063 <= icmp_ln137_fu_306_p2;
                icmp_ln137_reg_1063_pp0_iter1_reg <= icmp_ln137_reg_1063;
                icmp_ln139_reg_1067_pp0_iter1_reg <= icmp_ln139_reg_1067;
                indvar_flatten338_load_reg_1053 <= indvar_flatten338_fu_180;
                indvar_flatten371_load_reg_1058 <= indvar_flatten371_fu_188;
                select_ln139_reg_1103_pp0_iter1_reg <= select_ln139_reg_1103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln143_5_reg_1138 <= add_ln143_5_fu_657_p2;
                add_ln143_5_reg_1138_pp0_iter8_reg <= add_ln143_5_reg_1138;
                and_ln144_2_reg_1197_pp0_iter10_reg <= and_ln144_2_reg_1197_pp0_iter9_reg;
                and_ln144_2_reg_1197_pp0_iter11_reg <= and_ln144_2_reg_1197_pp0_iter10_reg;
                and_ln144_2_reg_1197_pp0_iter9_reg <= and_ln144_2_reg_1197;
                fm_addr_read_reg_1128 <= m_axi_fm_RDATA;
                fm_addr_read_reg_1128_pp0_iter6_reg <= fm_addr_read_reg_1128;
                icmp_ln144_reg_1143 <= icmp_ln144_fu_661_p2;
                icmp_ln144_reg_1143_pp0_iter10_reg <= icmp_ln144_reg_1143_pp0_iter9_reg;
                icmp_ln144_reg_1143_pp0_iter11_reg <= icmp_ln144_reg_1143_pp0_iter10_reg;
                icmp_ln144_reg_1143_pp0_iter8_reg <= icmp_ln144_reg_1143;
                icmp_ln144_reg_1143_pp0_iter9_reg <= icmp_ln144_reg_1143_pp0_iter8_reg;
                sext_ln137_cast_reg_1042 <= sext_ln137_cast_fu_252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_1143 = ap_const_lv1_0))) then
                and_ln144_2_reg_1197 <= and_ln144_2_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_1063_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fm_addr_1_reg_1122 <= add_ln143_4_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln144_3_reg_1162 <= icmp_ln144_3_fu_841_p2;
                lshr_ln144_reg_1167 <= lshr_ln144_fu_857_p2;
                    or_ln_reg_1152(0) <= or_ln_fu_829_p3(0);
                sub_ln144_2_reg_1172 <= sub_ln144_2_fu_863_p2;
                tmp_reg_1147 <= add_ln143_5_fu_657_p2(15 downto 15);
                trunc_ln144_2_reg_1177 <= trunc_ln144_2_fu_869_p1;
                    zext_ln144_reg_1157(15 downto 0) <= zext_ln144_fu_837_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln144_reg_1143 = ap_const_lv1_0))) then
                icmp_ln144_4_reg_1187 <= icmp_ln144_4_fu_971_p2;
                icmp_ln144_5_reg_1192 <= icmp_ln144_5_fu_977_p2;
            end if;
        end if;
    end process;
    or_ln_reg_1152(1) <= '0';
    zext_ln144_reg_1157(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to11, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to11 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    LD_fu_944_p5 <= (tmp_6_fu_937_p3 & zext_ln144_4_fu_906_p1(51 downto 0));
    add_ln137_1_fu_513_p2 <= std_logic_vector(unsigned(indvar_flatten371_load_reg_1058) + unsigned(ap_const_lv23_1));
    add_ln137_fu_318_p2 <= std_logic_vector(unsigned(k_fu_184) + unsigned(ap_const_lv10_1));
    add_ln139_1_fu_528_p2 <= std_logic_vector(unsigned(indvar_flatten338_load_reg_1053) + unsigned(ap_const_lv15_1));
    add_ln139_fu_398_p2 <= std_logic_vector(unsigned(select_ln137_fu_330_p3) + unsigned(ap_const_lv7_1));
    add_ln141_fu_523_p2 <= std_logic_vector(unsigned(select_ln139_reg_1103) + unsigned(ap_const_lv8_1));
    add_ln143_1_fu_471_p2 <= std_logic_vector(unsigned(select_ln139_3_fu_426_p3) + unsigned(zext_ln143_1_fu_462_p1));
    add_ln143_2_fu_487_p2 <= std_logic_vector(unsigned(zext_ln143_2_fu_483_p1) + unsigned(add_ln143_fu_466_p2));
    add_ln143_3_fu_477_p2 <= std_logic_vector(unsigned(add_ln143_1_fu_471_p2) + unsigned(select_ln139_4_cast_fu_450_p1));
    add_ln143_4_fu_645_p2 <= std_logic_vector(unsigned(add_ln143_8_fu_639_p2) + unsigned(zext_ln143_3_fu_631_p1));
    add_ln143_5_fu_657_p2 <= std_logic_vector(unsigned(fm_addr_1_read_reg_1133) + unsigned(fm_addr_read_reg_1128_pp0_iter6_reg));
    add_ln143_7_fu_634_p2 <= std_logic_vector(unsigned(j_cast11_fu_628_p1) + unsigned(sext_ln137_cast_reg_1042));
    add_ln143_8_fu_639_p2 <= std_logic_vector(unsigned(add_ln143_7_fu_634_p2) + unsigned(zext_ln141_fu_624_p1));
    add_ln143_fu_466_p2 <= std_logic_vector(unsigned(zext_ln137_2_fu_360_p1) + unsigned(output_feature_map));
    add_ln144_1_fu_803_p2 <= std_logic_vector(unsigned(trunc_ln144_fu_725_p1) + unsigned(ap_const_lv16_FFCB));
    add_ln144_2_fu_847_p2 <= std_logic_vector(unsigned(sub_ln144_1_fu_719_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln144_3_fu_890_p2 <= std_logic_vector(unsigned(select_ln144_1_fu_881_p3) + unsigned(zext_ln144_3_fu_887_p1));
    add_ln144_4_fu_931_p2 <= std_logic_vector(unsigned(sub_ln144_3_fu_926_p2) + unsigned(select_ln144_2_fu_918_p3));
    add_ln144_fu_729_p2 <= std_logic_vector(unsigned(sub_ln144_1_fu_719_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    and_ln137_fu_392_p2 <= (xor_ln137_fu_380_p2 and icmp_ln141_fu_386_p2);
    and_ln144_1_fu_817_p2 <= (xor_ln144_fu_797_p2 and bit_select30_i_i_i_fu_809_p3);
    and_ln144_2_fu_987_p2 <= (or_ln144_1_fu_983_p2 and grp_fu_247_p2);
    and_ln144_3_fu_771_p2 <= (select_ln144_fu_681_p3 and lshr_ln144_2_fu_765_p2);
    and_ln144_fu_783_p2 <= (icmp_ln144_2_fu_777_p2 and icmp_ln144_1_fu_745_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, m_axi_fm_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_fm_BVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, m_axi_fm_AWREADY, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_block_state3_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_io)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((m_axi_fm_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, m_axi_fm_AWREADY, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_block_state3_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_io)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((m_axi_fm_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_predicate_op209_writeresp_state24)
    begin
                ap_block_pp0_stage1_00001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_predicate_op209_writeresp_state24)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter11, m_axi_fm_ARREADY, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_block_state18_io, ap_predicate_op209_writeresp_state24)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((m_axi_fm_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter11, m_axi_fm_ARREADY, m_axi_fm_RVALID, m_axi_fm_BVALID, ap_block_state18_io, ap_predicate_op209_writeresp_state24)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((m_axi_fm_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter5_assign_proc : process(m_axi_fm_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter5 <= (m_axi_fm_RVALID = ap_const_logic_0);
    end process;

        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage1_iter6_assign_proc : process(m_axi_fm_RVALID)
    begin
                ap_block_state14_pp0_stage1_iter6 <= (m_axi_fm_RVALID = ap_const_logic_0);
    end process;

        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(m_axi_fm_AWREADY, m_axi_fm_WREADY, ap_predicate_op192_writereq_state18)
    begin
                ap_block_state18_io <= ((m_axi_fm_WREADY = ap_const_logic_0) or ((m_axi_fm_AWREADY = ap_const_logic_0) and (ap_predicate_op192_writereq_state18 = ap_const_boolean_1)));
    end process;

        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(m_axi_fm_WREADY, ap_predicate_op194_write_state19)
    begin
                ap_block_state19_io <= ((m_axi_fm_WREADY = ap_const_logic_0) and (ap_predicate_op194_write_state19 = ap_const_boolean_1));
    end process;

        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp0_stage0_iter11_assign_proc : process(m_axi_fm_BVALID)
    begin
                ap_block_state23_pp0_stage0_iter11 <= (m_axi_fm_BVALID = ap_const_logic_0);
    end process;


    ap_block_state24_pp0_stage1_iter11_assign_proc : process(m_axi_fm_BVALID, ap_predicate_op209_writeresp_state24)
    begin
                ap_block_state24_pp0_stage1_iter11 <= ((ap_predicate_op209_writeresp_state24 = ap_const_boolean_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_fm_ARREADY, icmp_ln137_reg_1063)
    begin
                ap_block_state3_io <= ((m_axi_fm_ARREADY = ap_const_logic_0) and (icmp_ln137_reg_1063 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln137_fu_306_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln137_fu_306_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln137_reg_1063_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln137_reg_1063_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to11_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to11 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op192_writereq_state18_assign_proc : process(icmp_ln144_reg_1143_pp0_iter8_reg, and_ln144_2_reg_1197)
    begin
                ap_predicate_op192_writereq_state18 <= ((ap_const_lv1_1 = and_ln144_2_reg_1197) and (icmp_ln144_reg_1143_pp0_iter8_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op194_write_state19_assign_proc : process(icmp_ln144_reg_1143_pp0_iter8_reg, and_ln144_2_reg_1197)
    begin
                ap_predicate_op194_write_state19 <= ((ap_const_lv1_1 = and_ln144_2_reg_1197) and (icmp_ln144_reg_1143_pp0_iter8_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op209_writeresp_state24_assign_proc : process(icmp_ln144_reg_1143_pp0_iter11_reg, and_ln144_2_reg_1197_pp0_iter11_reg)
    begin
                ap_predicate_op209_writeresp_state24 <= ((icmp_ln144_reg_1143_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln144_2_reg_1197_pp0_iter11_reg));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bit_select30_i_i_i_fu_809_p3 <= select_ln144_fu_681_p3(to_integer(unsigned(add_ln144_1_fu_803_p2)) downto to_integer(unsigned(add_ln144_1_fu_803_p2))) when (to_integer(unsigned(add_ln144_1_fu_803_p2)) >= 0 and to_integer(unsigned(add_ln144_1_fu_803_p2)) <=15) else "-";

    fm_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, m_axi_fm_ARREADY, ap_block_pp0_stage0, icmp_ln137_reg_1063, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_reg_1063 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            fm_blk_n_AR <= m_axi_fm_ARREADY;
        else 
            fm_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, m_axi_fm_AWREADY, ap_predicate_op192_writereq_state18, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op192_writereq_state18 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            fm_blk_n_AW <= m_axi_fm_AWREADY;
        else 
            fm_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, m_axi_fm_BVALID, ap_predicate_op209_writeresp_state24, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            fm_blk_n_B <= m_axi_fm_BVALID;
        else 
            fm_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, m_axi_fm_RVALID, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            fm_blk_n_R <= m_axi_fm_RVALID;
        else 
            fm_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, m_axi_fm_WREADY, icmp_ln144_reg_1143_pp0_iter8_reg, and_ln144_2_reg_1197, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln144_2_reg_1197) and (icmp_ln144_reg_1143_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            fm_blk_n_W <= m_axi_fm_WREADY;
        else 
            fm_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_247_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_247_ce <= ap_const_logic_1;
        else 
            grp_fu_247_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p0 <= LD_fu_944_p5;

    grp_fu_993_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_993_ce <= ap_const_logic_1;
        else 
            grp_fu_993_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_993_p0 <= grp_fu_993_p00(10 - 1 downto 0);
    grp_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_1_fu_338_p3),23));
    grp_fu_993_p1 <= ap_const_lv23_3980(14 - 1 downto 0);
    grp_fu_993_p2 <= grp_fu_993_p20(12 - 1 downto 0);
    grp_fu_993_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln139_2_fu_585_p3),23));
    icmp_ln137_fu_306_p2 <= "1" when (indvar_flatten371_fu_188 = ap_const_lv23_730000) else "0";
    icmp_ln139_fu_324_p2 <= "1" when (indvar_flatten338_fu_180 = ap_const_lv15_3980) else "0";
    icmp_ln141_fu_386_p2 <= "1" when (j_fu_172 = ap_const_lv8_A0) else "0";
    icmp_ln144_1_fu_745_p2 <= "1" when (signed(tmp_4_fu_735_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln144_2_fu_777_p2 <= "0" when (and_ln144_3_fu_771_p2 = ap_const_lv16_0) else "1";
    icmp_ln144_3_fu_841_p2 <= "1" when (signed(add_ln144_fu_729_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln144_4_fu_971_p2 <= "0" when (add_ln144_4_fu_931_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln144_5_fu_977_p2 <= "1" when (trunc_ln144_3_fu_961_p4 = ap_const_lv52_0) else "0";
    icmp_ln144_fu_661_p2 <= "1" when (add_ln143_5_fu_657_p2 = ap_const_lv16_0) else "0";
    j_cast11_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln139_reg_1103_pp0_iter1_reg),64));
    lshr_ln144_1_fu_896_p4 <= add_ln144_3_fu_890_p2(63 downto 1);
    lshr_ln144_2_fu_765_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln144_5_fu_761_p1(16-1 downto 0)))));
    lshr_ln144_fu_857_p2 <= std_logic_vector(shift_right(unsigned(zext_ln144_fu_837_p1),to_integer(unsigned('0' & zext_ln144_1_fu_853_p1(31-1 downto 0)))));

    m_axi_fm_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, icmp_ln137_reg_1063, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, fm_addr_reg_1109, fm_addr_1_reg_1122)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_fm_ARADDR <= fm_addr_1_reg_1122;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_reg_1063 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_ARADDR <= fm_addr_reg_1109;
        else 
            m_axi_fm_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_1;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;

    m_axi_fm_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, icmp_ln137_reg_1063, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_reg_1063 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_fm_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_AWADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_predicate_op192_writereq_state18, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, fm_addr_reg_1109_pp0_iter5_reg, fm_addr_reg_1109_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op192_writereq_state18 = ap_const_boolean_1))) then 
            m_axi_fm_AWADDR <= fm_addr_reg_1109_pp0_iter7_reg;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_AWADDR <= fm_addr_reg_1109_pp0_iter5_reg;
        else 
            m_axi_fm_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_1;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;

    m_axi_fm_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_predicate_op192_writereq_state18, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op192_writereq_state18 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_fm_AWVALID <= ap_const_logic_1;
        else 
            m_axi_fm_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, ap_predicate_op209_writeresp_state24, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op209_writeresp_state24 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_fm_BREADY <= ap_const_logic_1;
        else 
            m_axi_fm_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_fm_RREADY <= ap_const_logic_1;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_predicate_op194_write_state19, add_ln143_5_reg_1138_pp0_iter8_reg, ap_block_pp0_stage1_01001, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op194_write_state19 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_fm_WDATA <= ap_const_lv16_0;
        elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            m_axi_fm_WDATA <= add_ln143_5_reg_1138_pp0_iter8_reg;
        else 
            m_axi_fm_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_3;
    m_axi_fm_WUSER <= ap_const_lv1_0;

    m_axi_fm_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_predicate_op194_write_state19, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op194_write_state19 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_fm_WVALID <= ap_const_logic_1;
        else 
            m_axi_fm_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln137_1_fu_354_p0 <= mul_ln137_1_fu_354_p00(10 - 1 downto 0);
    mul_ln137_1_fu_354_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_1_fu_338_p3),25));
    mul_ln137_1_fu_354_p1 <= ap_const_lv25_7300(16 - 1 downto 0);
    or_ln139_fu_404_p2 <= (icmp_ln139_fu_324_p2 or and_ln137_fu_392_p2);
    or_ln144_1_fu_983_p2 <= (icmp_ln144_5_reg_1192 or icmp_ln144_4_reg_1187);
    or_ln144_fu_823_p2 <= (and_ln144_fu_783_p2 or and_ln144_1_fu_817_p2);
    or_ln_fu_829_p3 <= (ap_const_lv1_0 & or_ln144_fu_823_p2);
    select_ln137_1_fu_338_p3 <= 
        add_ln137_fu_318_p2 when (icmp_ln139_fu_324_p2(0) = '1') else 
        k_fu_184;
    select_ln137_2_fu_603_p3 <= 
        ap_const_lv14_0 when (icmp_ln139_reg_1067_pp0_iter1_reg(0) = '1') else 
        shl_ln_fu_596_p3;
    select_ln137_3_fu_571_p3 <= 
        ap_const_lv12_0 when (icmp_ln139_reg_1067(0) = '1') else 
        shl_ln141_1_fu_564_p3;
    select_ln137_4_fu_364_p3 <= 
        ap_const_lv15_0 when (icmp_ln139_fu_324_p2(0) = '1') else 
        shl_ln1_fu_290_p3;
    select_ln137_5_fu_372_p3 <= 
        ap_const_lv13_0 when (icmp_ln139_fu_324_p2(0) = '1') else 
        shl_ln143_1_fu_298_p3;
    select_ln137_fu_330_p3 <= 
        ap_const_lv7_0 when (icmp_ln139_fu_324_p2(0) = '1') else 
        i_fu_176;
    select_ln139_1_fu_617_p3 <= 
        shl_ln141_mid1_fu_610_p3 when (and_ln137_reg_1089_pp0_iter1_reg(0) = '1') else 
        select_ln137_2_fu_603_p3;
    select_ln139_2_fu_585_p3 <= 
        shl_ln141_1_mid1_fu_578_p3 when (and_ln137_reg_1089(0) = '1') else 
        select_ln137_3_fu_571_p3;
    select_ln139_3_fu_426_p3 <= 
        shl_ln143_mid1_fu_418_p3 when (and_ln137_fu_392_p2(0) = '1') else 
        select_ln137_4_fu_364_p3;
    select_ln139_4_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln139_4_fu_442_p3),15));
    select_ln139_4_fu_442_p3 <= 
        shl_ln143_1_mid1_fu_434_p3 when (and_ln137_fu_392_p2(0) = '1') else 
        select_ln137_5_fu_372_p3;
    select_ln139_5_fu_518_p3 <= 
        add_ln139_reg_1096 when (and_ln137_reg_1089(0) = '1') else 
        select_ln137_reg_1074;
    select_ln139_6_fu_533_p3 <= 
        ap_const_lv15_1 when (icmp_ln139_reg_1067(0) = '1') else 
        add_ln139_1_fu_528_p2;
    select_ln139_fu_410_p3 <= 
        ap_const_lv8_0 when (or_ln139_fu_404_p2(0) = '1') else 
        j_fu_172;
    select_ln144_1_fu_881_p3 <= 
        lshr_ln144_reg_1167 when (icmp_ln144_3_reg_1162(0) = '1') else 
        shl_ln144_fu_876_p2;
    select_ln144_2_fu_918_p3 <= 
        ap_const_lv11_3FF when (tmp_8_fu_910_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln144_fu_681_p3 <= 
        sub_ln144_fu_675_p2 when (tmp_fu_667_p3(0) = '1') else 
        add_ln143_5_fu_657_p2;
        sext_ln137_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln137),64));

        sext_ln143_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_493_p4),64));

        sext_ln144_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_699_p3),32));

    shl_ln141_1_fu_564_p3 <= (i_1_reg_1047 & ap_const_lv5_0);
    shl_ln141_1_mid1_fu_578_p3 <= (add_ln139_reg_1096 & ap_const_lv5_0);
    shl_ln141_mid1_fu_610_p3 <= (add_ln139_reg_1096_pp0_iter1_reg & ap_const_lv7_0);
    shl_ln143_1_fu_298_p3 <= (i_fu_176 & ap_const_lv6_0);
    shl_ln143_1_mid1_fu_434_p3 <= (add_ln139_fu_398_p2 & ap_const_lv6_0);
    shl_ln143_2_fu_454_p3 <= (select_ln139_fu_410_p3 & ap_const_lv1_0);
    shl_ln143_mid1_fu_418_p3 <= (add_ln139_fu_398_p2 & ap_const_lv8_0);
    shl_ln144_fu_876_p2 <= std_logic_vector(shift_left(unsigned(zext_ln144_reg_1157),to_integer(unsigned('0' & zext_ln144_2_fu_873_p1(31-1 downto 0)))));
    shl_ln1_fu_290_p3 <= (i_fu_176 & ap_const_lv8_0);
    shl_ln_fu_596_p3 <= (i_1_reg_1047_pp0_iter1_reg & ap_const_lv7_0);
    sub_ln144_1_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_3_fu_711_p3));
    sub_ln144_2_fu_863_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln144_1_fu_719_p2));
    sub_ln144_3_fu_926_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) - unsigned(trunc_ln144_2_reg_1177));
    sub_ln144_4_fu_755_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) - unsigned(trunc_ln144_1_fu_751_p1));
    sub_ln144_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(add_ln143_5_fu_657_p2));
    
    tmp_1_fu_689_p4_proc : process(select_ln144_fu_681_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_1_fu_689_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := select_ln144_fu_681_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_1_fu_689_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_1_fu_689_p4_i) := select_ln144_fu_681_p3(16-1-tmp_1_fu_689_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_689_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_2_fu_699_p3 <= (ap_const_lv1_1 & tmp_1_fu_689_p4);
    
    tmp_3_fu_711_p3_proc : process(sext_ln144_fu_707_p1)
    begin
        tmp_3_fu_711_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln144_fu_707_p1(i) = '1' then
                tmp_3_fu_711_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_4_fu_735_p4 <= add_ln144_fu_729_p2(31 downto 1);
    tmp_6_fu_937_p3 <= (tmp_reg_1147 & add_ln144_4_fu_931_p2);
    tmp_7_fu_789_p3 <= add_ln144_fu_729_p2(31 downto 31);
    tmp_8_fu_910_p3 <= add_ln144_3_fu_890_p2(54 downto 54);
    tmp_fu_667_p3 <= add_ln143_5_fu_657_p2(15 downto 15);
    trunc_ln144_1_fu_751_p1 <= sub_ln144_1_fu_719_p2(4 - 1 downto 0);
    trunc_ln144_2_fu_869_p1 <= tmp_3_fu_711_p3(11 - 1 downto 0);
    trunc_ln144_3_fu_961_p4 <= add_ln144_3_fu_890_p2(52 downto 1);
    trunc_ln144_fu_725_p1 <= sub_ln144_1_fu_719_p2(16 - 1 downto 0);
    trunc_ln7_fu_493_p4 <= add_ln143_2_fu_487_p2(63 downto 1);
    xor_ln137_fu_380_p2 <= (icmp_ln139_fu_324_p2 xor ap_const_lv1_1);
    xor_ln144_fu_797_p2 <= (tmp_7_fu_789_p3 xor ap_const_lv1_1);
    zext_ln137_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln137_1_fu_354_p2),64));
    zext_ln141_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln139_1_fu_617_p3),64));
    zext_ln143_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln143_2_fu_454_p3),15));
    zext_ln143_2_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_3_fu_477_p2),64));
    zext_ln143_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_993_p3),64));
    zext_ln144_1_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_2_fu_847_p2),64));
    zext_ln144_2_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln144_2_reg_1172),64));
    zext_ln144_3_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1152),64));
    zext_ln144_4_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln144_1_fu_896_p4),64));
    zext_ln144_5_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln144_4_fu_755_p2),16));
    zext_ln144_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln144_fu_681_p3),64));
end behav;
